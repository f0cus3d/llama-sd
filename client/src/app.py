import flask, logging, configargparse

from datetime import datetime
from time import sleep

# Load configuration file and settings
p = configargparse.ArgParser()
p.add('-g', '--group', help='default group name', env_var='APP_GROUP')
p.add('-s', '--server', required=True, help='server IP or hostname', env_var='APP_HOST')
p.add('-k', '--keepalive', required=False, help='default keepalive value in seconds', env_var='APP_KEEPALIVE')
p.add('-t', '--tags', required=False, help='tags in json format', env_var='APP_TAGS')
p.add('-p', '--port', required=False, help='listening web port', env_var='APP_PORT')
p.add('-v', '--verbose', help='verbose logging', action='store_true', env_var='APP_VERBOSE')

config = p.parse_args()

# Application version variable for tagging
application_version = "1.0"

# Set logging levels
if config.verbose:
    logging.basicConfig(format="%(asctime)s %(levelname)s %(threadName)s: %(message)s", encoding='utf-8', level=logging.DEBUG)
else:
    logging.basicConfig(format="%(asctime)s %(levelname)s %(threadName)s: %(message)s", encoding='utf-8', level=logging.INFO)

# Debug logging
logging.debug(p.format_values())
logging.debug(config)
    
# Metadata
    # Need a way to consume via web config or environment variable
        # { key: value, key2: value2 }
    # Add client version to the JSON

# Process tags given in environment variable.
def process_tags(tags):
    global application_version
    logging.debug("Tags generated by user: '%s'" % config.tags)

    # Cut string with multiple tags into a list for future processing
    tags_list = tags.split(", ")
    tags_list.append("version: %s" % application_version)

    logging.debug(tags_list)

    return tags_list


# Threaded function that periotically pushes JSON registration to the LLAMA server endpoint.
def keepalive():
    # Run every 60 seconds
    while(not sleep(60)):
        logging.debug("Keepalive Process Started")
    return


if __name__ == "__main__":
    process_tags(config.tags)
    keepalive()
