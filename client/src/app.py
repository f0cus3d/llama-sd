import json, logging, configargparse, urllib.request

from time import sleep

# Load configuration file and settings
p = configargparse.ArgParser(default_config_files=['.config.yml', '~/.config.yml'])
p.add('-c', '--config', required=False, is_config_file=True, help='config file path', env_var='APP_CONFIG')
p.add('-g', '--group', help='default group name', env_var='LLAMA_GROUP')
p.add('-k', '--keepalive', required=False, type=int, help='default keepalive value in seconds', env_var='LLAMA_KEEPALIVE')
p.add('-p', '--port', type=int, help='LLAMA probe port', env_var='LLAMA_PORT')
p.add('-s', '--server', required=False, help='server IP or hostname', env_var='LLAMA_SERVER')
p.add('-t', '--tags', required=False, help='tags in json format', action='append', env_var='LLAMA_TAGS')
p.add('-v', '--verbose', help='verbose logging', action='store_true', env_var='APP_VERBOSE')

config = p.parse_args()

# Application version variable for tagging
application_version = "0.0.1"

# Set logging levels
if config.verbose:
    logging.basicConfig(format="%(asctime)s %(levelname)s %(threadName)s: %(message)s", encoding='utf-8', level=logging.DEBUG)
else:
    logging.basicConfig(format="%(asctime)s %(levelname)s %(threadName)s: %(message)s", encoding='utf-8', level=logging.INFO)

# Debug logging
logging.debug(p.format_values())
logging.debug(config)
    

# POST JSON data to service discovery server
def post(body):
    url = config.server + "/api/v1/register"

    req = urllib.request.Request(url)
    req.add_header('Content-Type', 'application/json; charset=utf-8')

    jsondata = json.dumps(body)

    # Calculate and send Content Length
    jsondataasbytes = jsondata.encode('utf-8')
    req.add_header('Content-Length', len(jsondataasbytes))

    # Post data to server
    try:
        response = urllib.request.urlopen(req, jsondataasbytes)
        logging.debug("Server response status: %s" % response.status)
    except Exception as e:
        logging.error("Error sending data to '%s' - %s" % (url, e))


# Convert a list into a dictionary ['key: value', 'key2: value2'] ---> { 'key': 'value', 'key2': 'value2'}
def convert(lst):
    self_dict = {}
    for tag in lst:
        # 'key: value' --> { 'key': 'value' }
        self_dict[tag.split(': ')[0]] = tag.split(': ')[1]
    return self_dict


# Process application generated tags
def process_tags(tags):
    global application_version
    logging.debug("Tags generated by user: '%s'" % config.tags)

    # If no tags are set via config, catch error by initiating list
    if not config.tags:
        config.tags = []

    # Add client version to the tags
    config.tags.append("version: %s" % application_version)

    logging.debug("Tags: '%s'" % config.tags)
    return 


# Push JSON information every 60 seconds to the server for registration and keepalives
def keepalive():
    # Compile dictionary for JSON conversion
    payload = {}

    # Add port value to registration
    if config.keepalive:
        payload["port"] = config.port

    # Add keepalive value to registration
    if config.keepalive:
        payload["keepalive"] = config.keepalive
    
    # Add group value to registration
    if config.group:
        payload["group"] = config.group

    # Add tags to payload
    payload["tags"] = convert(config.tags)

    logging.info("JSON Payload: %s" % json.dumps(payload))
    logging.info("Registration will start in 60 seconds...")

    # Run every 60 seconds
    while(not sleep(60)):
        # push data
        post(payload)

        logging.info("Keepalive Sent to '%s'" % config.server)


if __name__ == "__main__":
    # Add any application generated tags 
    process_tags(config.tags)

    # Start the keepalive process
    keepalive()
